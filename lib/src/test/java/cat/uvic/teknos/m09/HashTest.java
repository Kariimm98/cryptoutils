/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package cat.uvic.teknos.m09;

import cat.uvic.teknos.m09.Exceptions.MissingPropertiesException;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

import java.security.NoSuchAlgorithmException;
import java.util.HashMap;

import static org.junit.jupiter.api.Assertions.*;

class HashTest {

    private static Hash hash;

    @BeforeAll
    static void beforeAll() {
        hash = assertDoesNotThrow(()-> new Hash());
    }

    @Test void sameMessageSameResult() throws NoSuchAlgorithmException {

        byte[] message = "hola".getBytes();
        byte[] message2 = "hola".getBytes();


        String result = assertDoesNotThrow(() ->  hash.getHashAsString(message));
        String result2 = assertDoesNotThrow(() ->  hash.getHashAsString(message2));

        assertEquals(result,result2);

    }

    //when in file properties missing property algorithm throw the exception.
    @Test void throwsMissingProperties(){
        byte[] message = "hola".getBytes();

        String alg = hash.getProps().getProperty("algorithm");
        hash.getProps().remove("algorithm");

        assertThrows(MissingPropertiesException.class,()->hash.getHash(message));

        hash.getProps().setProperty("algorithm",alg);

    }

    @Test void notSameHash(){
        byte[] message = "hola".getBytes();
        byte[] message2 = "hola2".getBytes();

        String result = assertDoesNotThrow(() ->  hash.getHashAsString(message));
        String result2 = assertDoesNotThrow(() ->  hash.getHashAsString(message2));

        assertNotEquals(result,result2);
    }

    //returns a hashmap with salt uses in digest and hash as byte[]
    @Test void getHashWithRandomSalt(){
        byte[] message = "hola".getBytes();

        HashMap<String, byte[]> result = assertDoesNotThrow(() ->  hash.getHashWithRandomSalt(message));

        assertDoesNotThrow(()->result.get("salt"));
        assertDoesNotThrow(()->result.get("hash"));

    }

    //returns a hashmap with salt uses in digest and hash as String
    @Test void getHashWithRandomSaltAsString(){
        byte[] message = "hola".getBytes();

        HashMap<String, String> result = assertDoesNotThrow(() ->  hash.getHashWithRandomSaltAsString(message));

        assertDoesNotThrow(()->result.get("salt"));
        assertDoesNotThrow(()->result.get("hash"));

    }
}
