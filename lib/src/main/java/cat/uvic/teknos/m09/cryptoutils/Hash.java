/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package cat.uvic.teknos.m09.cryptoutils;

import cat.uvic.teknos.m09.cryptoutils.Exceptions.MissingPropertiesException;
import cat.uvic.teknos.m09.cryptoutils.dto.DigestResult;

import java.io.IOException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.Base64;
import java.util.HashMap;
import java.util.Properties;

public  class Hash {
    public  static Properties props;

    static{
        props = new Properties();
        //takes file properties from current classpath
        try{
            props.load(ClassLoader.getSystemClassLoader().getResourceAsStream("/cryptoutils.properties"));
        }catch(IOException| NullPointerException error){
            setDefaultProperties();
        }
    }

    public  static byte[] getHash(byte[] message) throws NoSuchAlgorithmException, MissingPropertiesException {

        String algorithm = props.getProperty("algorithm");

        if(algorithm == null){
            throw new MissingPropertiesException();
        }

        var messageDigest = MessageDigest.getInstance(algorithm);
        var salt  = props.getProperty("salt");

        if(salt!=null){
            messageDigest.update(salt.getBytes());
        }

        return messageDigest.digest(message);
    }

    public static String getHashAsString(byte[] message) throws NoSuchAlgorithmException, MissingPropertiesException {
        String algorithm = props.getProperty("algorithm");

        if(algorithm == null){
            throw new MissingPropertiesException();
        }

        var messageDigest = MessageDigest.getInstance(algorithm);
        var salt  = props.getProperty("salt");

        if(salt!=null){
            messageDigest.update(salt.getBytes());
        }

        var digest = messageDigest.digest(message);
        var base64Encoder = Base64.getEncoder();
        return base64Encoder.encodeToString(digest);

    }

    public static DigestResult getHashWithRandomSalt(byte[] message) throws MissingPropertiesException, NoSuchAlgorithmException {
        DigestResult<byte[]> result;

        String algorithm = props.getProperty("algorithm");

        if(algorithm == null){
            throw new MissingPropertiesException();
        }

        var messageDigest = MessageDigest.getInstance(algorithm);
        var salt  = getRandomSalt();

        messageDigest.update(salt);
        result = new DigestResult(messageDigest.digest(message),algorithm,salt);

        return result;
    }

    public static DigestResult getHashWithRandomSaltAsString(byte[] message) throws MissingPropertiesException, NoSuchAlgorithmException {
        DigestResult<String> result;

        String algorithm = props.getProperty("algorithm");

        if(algorithm == null){
            throw new MissingPropertiesException();
        }

        var messageDigest = MessageDigest.getInstance(algorithm);
        var salt  = getRandomSalt();

        messageDigest.update(salt);

        var digest = messageDigest.digest(message);
        var base64Encoder = Base64.getEncoder();
        String hashResult = base64Encoder.encodeToString(digest);

        result = new DigestResult<>(hashResult,algorithm,new String(salt));

        return result;
    }

    //takes file properties from Library resources
    public static void setDefaultProperties() {
        try {
            props.load(Hash.class.getResourceAsStream("/cryptoutils.properties"));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }


    public  static byte[] getRandomSalt(){
        var secureRandom = new SecureRandom();
        var salt  = new byte[16];
        secureRandom.nextBytes(salt);
        return salt;
    }
}
